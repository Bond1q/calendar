{"version":3,"file":"main.js","mappings":"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","sources":["webpack://calendar/./apps/server/src/app/absence/absence.controller.ts","webpack://calendar/./apps/server/src/app/absence/absence.model.ts","webpack://calendar/./apps/server/src/app/absence/absence.module.ts","webpack://calendar/./apps/server/src/app/absence/absence.service.ts","webpack://calendar/./apps/server/src/app/absence/dto/create-absence.dto.ts","webpack://calendar/./apps/server/src/app/absence/dto/update-absence.dto.ts","webpack://calendar/./apps/server/src/app/app.module.ts","webpack://calendar/./libs/shared/types/src/index.ts","webpack://calendar/./libs/shared/types/src/lib/shared-types.ts","webpack://calendar/./libs/shared/types/src/lib/types.ts","webpack://calendar/external commonjs \"@nestjs/common\"","webpack://calendar/external commonjs \"@nestjs/config\"","webpack://calendar/external commonjs \"@nestjs/core\"","webpack://calendar/external commonjs \"@nestjs/typeorm\"","webpack://calendar/external commonjs \"class-validator\"","webpack://calendar/external commonjs \"moment\"","webpack://calendar/external commonjs \"tslib\"","webpack://calendar/external commonjs \"typeorm\"","webpack://calendar/webpack/bootstrap","webpack://calendar/./apps/server/src/main.ts"],"sourcesContent":["import { Body, Controller, Delete, Get, Param, ParseUUIDPipe, Post, Put, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { AbsenceService } from './absence.service';\nimport { CreateAbsenceDto } from './dto/create-absence.dto';\nimport { UpdateAbsenceDto } from './dto/update-absence.dto';\n\n@Controller('absence')\nexport class AbsenceController {\n\tconstructor(private absenceService: AbsenceService) { }\n\n\t@Get()\n\tgetAllAbsence() {\n\t\treturn this.absenceService.getAllAbsence();\n\t}\n\n\t@Post()\n\t@UsePipes(ValidationPipe)\n\tcreateAbsence(@Body() absence: CreateAbsenceDto) {\n\t\treturn this.absenceService.createAbsence(absence);\n\t}\n\n\t@Put(':id')\n\t@UsePipes(ValidationPipe)\n\tupdateAbsence(@Param('id', ParseUUIDPipe) id: string, @Body() absence: UpdateAbsenceDto) {\n\t\treturn this.absenceService.updateAbsence(id, absence);\n\t}\n\n\t@Delete(':id')\n\t@UsePipes(ValidationPipe)\n\tdeleteAbsence(@Param('id', ParseUUIDPipe) id: string) {\n\t\treturn this.absenceService.deleteAbsence(id);\n\t}\n}\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\nimport { AbsenceTypes, Absence as IAbsence } from 'shared/types';\n\n@Entity()\nexport class Absence implements IAbsence {\n\t@Column({ type: 'enum', enum: AbsenceTypes })\n\ttype: AbsenceTypes;\n\n\t@Column()\n\tdateStart: Date;\n\n\t@Column()\n\tdateEnd: Date;\n\n\t@Column()\n\tcomment: string;\n\n\t@PrimaryGeneratedColumn(\"uuid\")\n\tid: string;\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AbsenceController } from './absence.controller';\nimport { Absence } from './absence.model';\nimport { AbsenceService } from './absence.service';\n\n@Module({\n\timports: [TypeOrmModule.forFeature([Absence])],\n\tcontrollers: [AbsenceController],\n\tproviders: [AbsenceService],\n})\nexport class AbsenceModule { }\n","import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between, Not, Repository } from 'typeorm';\nimport { Absence } from './absence.model';\nimport { AbsenceTypes } from 'shared/types';\nimport * as moment from 'moment';\nimport { CreateAbsenceDto } from './dto/create-absence.dto';\nimport { UpdateAbsenceDto } from './dto/update-absence.dto';\n@Injectable()\nexport class AbsenceService {\n\tconstructor(\n\t\t@InjectRepository(Absence)\n\t\tprivate absenceRepository: Repository<Absence>,\n\t) { }\n\n\tasync getAllAbsence(): Promise<Absence[]> {\n\t\treturn this.absenceRepository.find();\n\t}\n\n\tasync createAbsence(absence: CreateAbsenceDto) {\n\t\tif (absence.type !== AbsenceTypes.SICK && moment(absence.dateStart).isBefore(moment(), 'day')) {\n\t\t\tthrow new HttpException(\n\t\t\t\t`Cannot create absence with type: ${absence.type} in the past`,\n\t\t\t\tHttpStatus.BAD_REQUEST,\n\t\t\t);\n\t\t}\n\t\tconst findedAbsences = await this.absenceRepository.find({\n\t\t\twhere: {\n\t\t\t\tdateStart: Between(moment(absence.dateStart).toDate(), moment(absence.dateEnd).toDate()),\n\t\t\t\tdateEnd: Between(moment(absence.dateStart).toDate(), moment(absence.dateEnd).toDate()),\n\t\t\t},\n\t\t});\n\t\tif (findedAbsences.length === 0) {\n\t\t\tconst result = await this.absenceRepository.insert(absence);\n\t\t\treturn this.absenceRepository.findOneBy({ id: result.raw[0].id });\n\t\t}\n\t\tthrow new HttpException('There is absence in this period in database', HttpStatus.BAD_REQUEST);\n\t}\n\n\tasync updateAbsence(id: string, absence: UpdateAbsenceDto) {\n\t\tconst findedAbsences = await this.absenceRepository.find({\n\t\t\twhere: {\n\t\t\t\tdateStart: Between(moment(absence.dateStart).toDate(), moment(absence.dateEnd).toDate()),\n\t\t\t\tdateEnd: Between(moment(absence.dateStart).toDate(), moment(absence.dateEnd).toDate()),\n\t\t\t\tid: Not(id),\n\t\t\t},\n\t\t});\n\n\t\tif (findedAbsences.length !== 0) {\n\t\t\tthrow new HttpException('There is absence in this period in database', HttpStatus.BAD_REQUEST);\n\t\t}\n\n\t\tconst result = await this.absenceRepository.update(id, absence);\n\n\t\tif (result.affected) return this.absenceRepository.findOneBy({ id: id });\n\t\tthrow new HttpException('There is not such id in database', HttpStatus.BAD_REQUEST);\n\t}\n\n\tasync deleteAbsence(id: string) {\n\t\tconst res = await this.absenceRepository.delete(id);\n\t\tif (res.affected) return this.absenceRepository.findOneBy({ id: id });\n\t\tthrow new HttpException('There is not such id in database', HttpStatus.BAD_REQUEST);\n\t}\n}\n","import { IsDateString, IsEnum, IsString, MaxLength, MinLength } from \"class-validator\";\nimport { AbsenceTypes, Absence as IAbsence } from 'shared/types';\n\nexport class CreateAbsenceDto implements Omit<IAbsence, 'id'> {\n\t@IsEnum(AbsenceTypes, { message: \"Incorrect absence type\" })\n\treadonly type: AbsenceTypes;\n\n\t@IsDateString()\n\treadonly dateStart: Date;\n\n\t@IsDateString()\n\treadonly dateEnd: Date;\n\n\t@IsString()\n\t@MinLength(1)\n\t@MaxLength(200)\n\treadonly comment: string;\n}","import { IsDateString } from \"class-validator\";\nimport { Absence as IAbsence } from 'shared/types';\n\nexport class UpdateAbsenceDto implements Pick<IAbsence, 'dateStart' | 'dateEnd'> {\n\t@IsDateString()\n\treadonly dateStart: Date;\n\n\t@IsDateString()\n\treadonly dateEnd: Date;\n\n}","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { AbsenceModule } from './absence/absence.module';\nimport { Absence } from './absence/absence.model';\n\n@Module({\n\timports: [\n\t\tConfigModule.forRoot({\n\t\t\tenvFilePath: '.env'\n\t\t}),\n\t\tTypeOrmModule.forRoot({\n\t\t\ttype: 'postgres',\n\t\t\thost: process.env['POSTGRES_HOST'],\n\t\t\tport: Number(process.env['POSTGRES_PORT']),\n\t\t\tusername: process.env['POSTGRES_USER'],\n\t\t\tpassword: process.env['POSTGRES_PASSWORD'],\n\t\t\tdatabase: process.env['POSTGRES_DB'],\n\t\t\tentities: [Absence],\n\t\t\tsynchronize: true,\n\t\t}),\n\t\tAbsenceModule,\n\t],\n\tcontrollers: [],\n\tproviders: [],\n})\nexport class AppModule { }\n","export * from './lib/shared-types';\nexport * from './lib/types'","export function sharedTypes(): string {\n  return 'shared-types';\n}\n","export enum AbsenceTypes {\r\n\tSICK = 'sick',\r\n\tVACATION = 'vacation',\r\n}\r\n\r\nexport interface Absence {\r\n\ttype: AbsenceTypes;\r\n\tdateStart: Date;\r\n\tdateEnd: Date;\r\n\tcomment: string;\r\n\tid: string;\r\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"class-validator\");","module.exports = require(\"moment\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n\tconst app = await NestFactory.create(AppModule, { cors: true });\n\tconst port = process.env['PORT'] || 3333;\n\tawait app.listen(port);\n\tLogger.log(\n\t\t`🚀 Application is running on: http://localhost:${port}`\n\t);\n}\n\nbootstrap();\n"],"names":["AbsenceController","constructor","absenceService","getAllAbsence","this","createAbsence","absence","updateAbsence","id","deleteAbsence","Get","Post","UsePipes","ValidationPipe","Body","CreateAbsenceDto","Put","Param","ParseUUIDPipe","UpdateAbsenceDto","Delete","Controller","AbsenceService","Absence","Column","type","enum","AbsenceTypes","Date","PrimaryGeneratedColumn","Entity","AbsenceModule","Module","imports","TypeOrmModule","forFeature","controllers","providers","absenceRepository","find","SICK","moment","dateStart","isBefore","HttpException","HttpStatus","BAD_REQUEST","where","Between","toDate","dateEnd","length","result","insert","findOneBy","raw","Not","update","affected","delete","Injectable","InjectRepository","Repository","IsEnum","message","IsDateString","IsString","MinLength","MaxLength","AppModule","ConfigModule","forRoot","envFilePath","host","process","env","port","Number","username","password","database","entities","synchronize","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","cors","listen","Logger","log","bootstrap"],"sourceRoot":""}